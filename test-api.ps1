# Script PowerShell para testar a API do backend
# Execute: .\test-api.ps1

Write-Host "`nüîç Testando Backend do Lead Campanha...`n" -ForegroundColor Cyan

# Teste 1: Health Check
Write-Host "1Ô∏è‚É£ Testando Health Check..." -ForegroundColor Yellow
try {
    $health = Invoke-RestMethod -Uri "http://localhost:4000/api/health" -Method Get
    if ($health.ok -eq $true) {
        Write-Host "   ‚úÖ Backend est√° rodando!" -ForegroundColor Green
    } else {
        Write-Host "   ‚ùå Backend retornou resposta inesperada" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ùå Erro: Backend n√£o est√° acess√≠vel" -ForegroundColor Red
    Write-Host "   ‚Üí Certifique-se de que 'npm run dev' est√° rodando no backend" -ForegroundColor Yellow
    exit 1
}

# Teste 2: Login
Write-Host "`n2Ô∏è‚É£ Testando Login..." -ForegroundColor Yellow
try {
    $body = @{
        email = "admin@leadcampanha.com"
        password = "admin123"
    } | ConvertTo-Json

    $headers = @{
        "Content-Type" = "application/json"
    }

    $login = Invoke-RestMethod -Uri "http://localhost:4000/api/login" -Method Post -Body $body -Headers $headers
    
    if ($login.token) {
        Write-Host "   ‚úÖ Login funcionou! Token recebido." -ForegroundColor Green
        Write-Host "   üë§ Usu√°rio: $($login.user.name)" -ForegroundColor Cyan
        
        # Teste 3: Buscar dados autenticados
        Write-Host "`n3Ô∏è‚É£ Testando busca de leads..." -ForegroundColor Yellow
        $authHeaders = @{
            "Authorization" = "Bearer $($login.token)"
        }
        
        $leads = Invoke-RestMethod -Uri "http://localhost:4000/api/leads" -Method Get -Headers $authHeaders
        Write-Host "   ‚úÖ API retornou $($leads.Count) leads" -ForegroundColor Green
        
    } else {
        Write-Host "   ‚ùå Login falhou: token n√£o recebido" -ForegroundColor Red
    }
} catch {
    Write-Host "   ‚ùå Erro no login: $($_.Exception.Message)" -ForegroundColor Red
}

# Teste 4: CORS
Write-Host "`n4Ô∏è‚É£ Verificando CORS..." -ForegroundColor Yellow
Write-Host "   ‚ÑπÔ∏è  CORS deve permitir: http://localhost:5173" -ForegroundColor Cyan
Write-Host "   ‚Üí Verifique no backend/.env se FRONTEND_URL est√° configurado" -ForegroundColor Yellow

# Teste 5: Portas
Write-Host "`n5Ô∏è‚É£ Verificando portas em uso..." -ForegroundColor Yellow
$port4000 = netstat -ano | Select-String ":4000"
$port5173 = netstat -ano | Select-String ":5173"

if ($port4000) {
    Write-Host "   ‚úÖ Porta 4000 (backend) est√° em uso" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  Porta 4000 (backend) N√ÉO est√° em uso" -ForegroundColor Yellow
}

if ($port5173) {
    Write-Host "   ‚úÖ Porta 5173 (frontend) est√° em uso" -ForegroundColor Green
} else {
    Write-Host "   ‚ö†Ô∏è  Porta 5173 (frontend) N√ÉO est√° em uso" -ForegroundColor Yellow
}

Write-Host "`n‚úÖ Testes completos!`n" -ForegroundColor Green
Write-Host "üìå Pr√≥ximos passos:" -ForegroundColor Cyan
Write-Host "   1. Abra http://localhost:5173 no navegador" -ForegroundColor White
Write-Host "   2. Aperte F12 para abrir o console" -ForegroundColor White
Write-Host "   3. Veja se h√° erros em vermelho" -ForegroundColor White
Write-Host "   4. Me envie o print se houver erros`n" -ForegroundColor White
