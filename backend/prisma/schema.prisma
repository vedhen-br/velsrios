generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id        String    @id @default(cuid())
  email     String    @unique
  password  String
  name      String
  phone     String?
  avatar    String?
  bio       String?
  timezone  String?   @default("America/Sao_Paulo")
  data      String?
  role      String    @default("user")
  available Boolean   @default(true)
  maxLeads  Int       @default(30)
  leads     Lead[]
  tasks     Task[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("users")
}

model Lead {
  id              String    @id @default(cuid())
  name            String?
  phone           String    @unique
  email           String?
  origin          String    @default("whatsapp")
  priority        String    @default("low")
  stage           String    @default("new")
  assignedTo      String?
  assignedUser    User?     @relation(fields: [assignedTo], references: [id])
  status          String    @default("open")
  interest        String?
  notes           String?
  data            String?
  aiEnabled       Boolean   @default(true)
  lastInteraction DateTime?
  messages        Message[]
  logs            LeadLog[]
  tasks           Task[]
  tags            Tag[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@map("leads")
}

model Message {
  id         String   @id @default(cuid())
  lead       Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId     String
  sender     String
  text       String
  direction  String
  whatsappId String?  // ID da mensagem no WhatsApp
  status     String?  @default("sent") // sent, delivered, read, failed
  mediaUrl   String?  // URL de mídia (imagem, documento, etc)
  createdAt  DateTime @default(now())

  @@map("messages")
}

model LeadLog {
  id        String   @id @default(cuid())
  lead      Lead     @relation(fields: [leadId], references: [id], onDelete: Cascade)
  leadId    String
  userId    String?
  action    String
  message   String
  createdAt DateTime @default(now())

  @@map("lead_logs")
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  completed   Boolean  @default(false)
  lead        Lead?    @relation(fields: [leadId], references: [id], onDelete: SetNull)
  leadId      String?
  user        User?    @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tasks")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String?  @default("#3B82F6")
  leads     Lead[]
  createdAt DateTime @default(now())

  @@map("tags")
}

// Armazena sessão/credenciais/keys do WhatsApp (Baileys) no Postgres
model WhatsAppStore {
  key       String   @id
  value     String
  updatedAt DateTime @updatedAt

  @@map("whatsapp_store")
}
